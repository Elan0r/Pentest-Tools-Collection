$FormatEnumerationLimit = -1

function scan {
<#
    .SYNOPSIS
    Small Portscanner mainly based on the work of Niklas Goude https://twitter.com/ngoude
        
    .PARAMETER IPStart
    Your starting IP

    .PARAMETER IPEnd
    Your ending IP

    .PARAMETER DNS
    Try to get HostNames from IPs

    .PARAMETER ScanPort
    Perform a PortScan

    .PARAMETER Ports
    Ports That should be scanned, default values are:
    21,22,23,53,80,139,389,443,445,636,1433,3128,8080,3389,5985 

    .PARAMETER ExportCSV
    Exports the final results table as CSV to the PWD

    .PARAMETER TimeOut
    Time (in MilliSeconds) before TimeOut, Default set to 100

    .EXAMPLE
    scan -IPStart 192.168.0.1 -IPEnd 192.168.0.10

    .EXAMPLE
    scan -IPStart 192.168.0.1 -IPEnd 192.168.0.10 -ScanPort -DNS

    .EXAMPLE
    scan -IPStart 192.168.0.1 -IPEnd 192.168.0.10 -ScanPort -Ports 22,3389,5985

    .LINK
    https://github.com/LuemmelSec

    .NOTES
    LuemmelSec 2021
  #>
  Param(
    [parameter(Mandatory = $true,
      Position = 0)]
    [ValidatePattern("\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b")]
    [string]$IPStart,
    [parameter(Mandatory = $true,
      Position = 1)]
    [ValidatePattern("\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b")]
    [string]$IPEnd,
    [switch]$DNS,
    [switch]$ScanPort,
    [switch]$ExportCSV,
    [int[]]$Ports = @(21,22,23,53,80,139,389,443,445,636,1433,3128,8080,3389,5985),
    [int]$TimeOut = 100
  )
dostuff

}

function dostuff{
$ping = New-Object System.Net.Networkinformation.Ping
$totalresults=@()
$Highlight = @{
    True = 'Red'
    False = 'Green'
}    
    ### Loop loop loop
    foreach($a in ($IPStart.Split(".")[0]..$IPEnd.Split(".")[0])) {
      foreach($b in ($IPStart.Split(".")[1]..$IPEnd.Split(".")[1])) {
        foreach($c in ($IPStart.Split(".")[2]..$IPEnd.Split(".")[2])) {
          foreach($d in ($IPStart.Split(".")[3]..$IPEnd.Split(".")[3])) {
            
            ### Try to ping
            try{
            $ip = "$a.$b.$c.$d"
            $pingStatus = $ping.Send($ip,$TimeOut)
            $pingsuccess = $pingStatus.Status
            }
            catch{
            
            }
            ### End try to ping

            ### Try host DNS resolve
            if($DNS){
                try{
                    #$hostname = [System.Net.Dns]::GetHostEntry($ip).HostName
                    $getHostEntry = [Net.DNS]::BeginGetHostEntry($pingStatus.Address, $null, $null)
                }
                catch{
                    $hostname = "no DNS"
                }
             }
             ### End Try host DNS resolve


             ### Portscan
             try{
             if($ScanPort) {
                $openPorts = @()
                for($i = 1; $i -le $ports.Count;$i++) {
                  $port = $Ports[($i-1)]
                  $client = New-Object System.Net.Sockets.TcpClient
                  $beginConnect = $client.BeginConnect($pingStatus.Address,$port,$null,$null)
                  if($client.Connected) {
                    $openPorts += $port
                  } else {
                    # Wait
                    Start-Sleep -Milli $TimeOut
                    if($client.Connected) {
                      $openPorts += $port
                    }
                  }
                  $client.Close()
                 }
              }
              }
              catch{
              $openPorts = "no open ports"
              }
              
              if($DNS) {
                try{
                    $hostName = ([System.Net.DNS]::EndGetHostEntry([IAsyncResult]$getHostEntry)).HostName 
                    }
                catch{
                    }
                }
            ### End Portscan 
            
            ### Format stuff          
                $1 = "$a.$b.$c.$d";
                $2 = $hostName;
                $3 = $pingsuccess;
                $4 = $openPorts
                Write-Host("Here is your intermediate results: ")
                if(($hostname -ne "no DNS" -and $hostname -ne ""-and $hostname -ne $null) -and ($pingsuccess -eq "Success") -and ($ports)){
                Write-Host "IP: $1 " -ForegroundColor Yellow ;Write-Host "DNS: $2 " -ForegroundColor Green ;Write-Host "PING: $3 " -ForegroundColor Green ; Write-Host "PORTS: $4 " -ForegroundColor Green 
                }
                elseif(($hostname -ne "no DNS" -and $hostname -ne ""-and $hostname -ne $null) -and ($pingsuccess -eq "Success") -and ($ports -eq "no open ports")){
                Write-Host "IP: $1 " -ForegroundColor Yellow ;Write-Host "DNS: $2 " -ForegroundColor Green ;Write-Host "PING: $3 " -ForegroundColor Green ; Write-Host "PORTS: $4 " -ForegroundColor Red 
                }
                elseif(($hostname -eq "no DNS" -or $hostname -eq "" -or $hostnmae -eq $null) -and ($pingsuccess -eq "Success") -and ($ports -eq "no open ports")){
                Write-Host "IP: $1 " -ForegroundColor Yellow ;Write-Host "DNS: $2 " -ForegroundColor Red ;Write-Host "PING: $3 " -ForegroundColor Green ; Write-Host "PORTS: $4 " -ForegroundColor Red 
                }
                elseif(($hostname -eq "no DNS" -or $hostname -eq "" -or $hostnmae -eq $null) -and ($pingsuccess -eq "Success") -and ($ports)){
                Write-Host "IP: $1 " -ForegroundColor Yellow ;Write-Host "DNS: $2 " -ForegroundColor Red ;Write-Host "PING: $3 " -ForegroundColor Green ; Write-Host "PORTS: $4 " -ForegroundColor Green  
                }
                else{
                Write-Host "IP: $1 " -ForegroundColor Yellow ;Write-Host "DNS: $2 " -ForegroundColor Red ;Write-Host "PING: $3 " -ForegroundColor Red ; Write-Host "PORTS: $4 " -ForegroundColor Red  
                }
                # Return Object
                
                $obj = New-Object PSObject
                $obj | Add-Member NoteProperty -Name IP -Value $1
                $obj | Add-Member NoteProperty -Name DNS -Value $2
                $obj | Add-Member NoteProperty -Name PING -Value $3
                $obj | Add-Member NoteProperty -Name PORTS -Value $4
                $totalresults += $obj
             
             
             $openports = ""
             $hostname = ""
             ### End Format stuff 
          }
        }
      }
    }
$totalresults | Format-Table -Property IP,DNS,PING,PORTS -AutoSize -Wrap
if($ExportCSV){
$totalresults | export-csv .\scan_export.csv
}
#END OF ForEach        
}
